import java.util.ArrayList;

class pointCollection{
	
	ArrayList<Point> points = new ArrayList<Point>();
	
	static ArrayList<Edge> edges = new ArrayList<Edge>();
	
	double margin;
	
	static int DEdgeNum = 0;
	
	public pointCollection(double Margin){
		margin = Margin;
	}
	
	public void addPoint(double X, double Y)
	{
		int pointNum = points.size();
		points.add(new Point(X, Y, pointNum));
		System.out.println(points.get(points.size()-1));
	}
	
	public void loadArrayList(ArrayList<Point> newPoints)
	{
		points = newPoints;
		// System.out.println(newPoints);
	}
	
	public void findEdges()
	{
		int edgeNum = 0;
		
		edges = new ArrayList<Edge>();
		edges.add(new Edge(points.get(0), edgeNum));
		points.get(0).setEdgeNum(edgeNum);
		// System.out.println(edges + "vvv\n");
		while(areThereAnyFreePoints())
		{
			// System.out.println("a");
			while(areTerePointsNearby(edges.size()-1))
			{
				Point closestPoint = findClosestPoint(edges.size()-1);
				// System.out.println("b");
				if(closestPoint.getEdgeNum() == -1)
				{
					edges.get(edges.size()-1).addPoint(closestPoint);
					closestPoint.setEdgeNum(edgeNum);
					// System.out.println(distanceInbetween(edges.get(edges.size()-1).getEndPoint(), closestPoint));
				}
				else
					combineEdges(closestPoint.getEdgeNum(), edges.size()-1);
				// System.out.println(points);
			}
			
			if(areThereAnyFreePoints())
			{
					edgeNum = edges.size();
					Point freePoint = findFreePoint();
					edges.add(new Edge(freePoint, edgeNum));
					freePoint.setEdgeNum(edgeNum);
			}
			// System.out.println(1);
		}
		// drawEdges();
		// System.out.println(edges);
	}
	
	public void combineEdges(int edgeNumA, int edgeNumB)
	{
		//  older    newer
		int older = 0;
		int newer = 0;
		if(edgeNumA<edgeNumB)
		{
			older = edgeNumA;
			newer = edgeNumB;
		}
		else if(edgeNumB<edgeNumA)
			{
				older = edgeNumB;
				newer = edgeNumA;
			}
			else
			{
				edges.get(edgeNumA).loop();
			}
			
		if(edgeNumA!=edgeNumB)
		{
			if(distanceInbetween(edges.get(newer).getEndPoint(), edges.get(older).getEndPoint()) < 
				distanceInbetween(edges.get(newer).getStartPoint(), edges.get(older).getEndPoint()) && 
				distanceInbetween(edges.get(newer).getEndPoint(), edges.get(older).getEndPoint()) <= margin*2.0)
				{
					edges.get(older).addEndToEnd(edges.get(newer));
					// System.out.println("ee");
				}
			if(distanceInbetween(edges.get(older).getStartPoint(), edges.get(newer).getEndPoint()) < 
				distanceInbetween(edges.get(older).getEndPoint(), edges.get(newer).getEndPoint()) && 
				distanceInbetween(edges.get(older).getStartPoint(), edges.get(newer).getEndPoint()) <= margin*2.0)
				{
					edges.get(older).addStartToEnd(edges.get(newer));
					// System.out.println("se");
				}
			edges.remove(edgeNumB);
		}
	}
	
	private boolean areThereAnyFreePoints()
	{
		boolean result = false;
		for(int i = 0; i < points.size(); i++)
		{
			if(points.get(i).getEdgeNum() == -1)
				result = true;
		}
		return result;
	}
	
	private boolean areTerePointsNearby(int searchEdgeNum)
	{
		boolean result = false;
		Point endPoint = edges.get(searchEdgeNum).getEndPoint();
		for(int i = 0; i < points.size(); i++)
		{
			if(distanceInbetween(endPoint, points.get(i))<=margin*2.0 && searchEdgeNum != points.get(i).getEdgeNum())
				result = true;
		}
		return result;
	}
	
	private Point findClosestPoint(int searchEdgeNum)
	{
		Point result = new Point(10, 10, 0);
		double minDistance = margin*2.0;
		Point endPoint = edges.get(searchEdgeNum).getEndPoint();
		for(int i = 0; i < points.size(); i++)
		{
			if(distanceInbetween(endPoint, points.get(i))<=minDistance && searchEdgeNum != points.get(i).getEdgeNum())
			{
				result = points.get(i);
				minDistance = distanceInbetween(endPoint, points.get(i));
			}
		}
		return result;
	}
	
	public static void stepDraw()
	{
		if(DEdgeNum<edges.size()&&!edges.get(DEdgeNum).stepDraw())
			DEdgeNum++;
	}

	public static void drawEdges()
	{
		for(int i = 0; i < edges.size(); i++)
		{
			edges.get(i).drawEdge();
		}
		
	}
	
	private Point findFreePoint()
	{
		for(int i = 0; i < points.size(); i++)
		{
			if(points.get(i).getEdgeNum() == -1)
				return points.get(i);
		}
		return null;
	}
	
	private double distanceInbetween(Point A, Point B)
	{
		double dx = B.getX() - A.getX();
		double dy = B.getY() - A.getY();
		double distance = Math.sqrt(dx*dx + dy*dy);
		return distance;
	}
	
	public String toString()
	{
		return points + "";
	}
}